version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: course-management-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - app-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: course-management-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass "redis123"
    networks:
      - app-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: course-management-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=course-search
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.auth
    container_name: course-management-auth
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/course_management_system?authSource=admin
      JWT_SECRET: your_super_secret_jwt_key_change_in_production
      AUTH_SERVICE_PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Course Service
  course-service:
    build:
      context: .
      dockerfile: Dockerfile.courses
    container_name: course-management-courses
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/course_management_system?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      ELASTICSEARCH_NODE: http://elasticsearch:9200
      COURSE_SERVICE_PORT: 3002
    ports:
      - "3002:3002"
    depends_on:
      - mongodb
      - redis
      - elasticsearch
    networks:
      - app-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Service
  ai-service:
    build:
      context: .
      dockerfile: Dockerfile.auth
    container_name: course-management-ai
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/course_management_system?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      GEMINI_API_KEY: your_gemini_api_key_here
      AI_SERVICE_PORT: 3003
    ports:
      - "3003:3003"
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["node", "services/ai-recommendations/server.js"]

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.auth
    container_name: course-management-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      AUTH_SERVICE_URL: http://auth-service:3001
      COURSE_SERVICE_URL: http://course-service:3002
      AI_SERVICE_URL: http://ai-service:3003
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - course-service
      - ai-service
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["node", "server.js"]

volumes:
  mongodb_data:
  redis_data:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge